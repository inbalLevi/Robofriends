{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrrorBoundry","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","ErrorBoundry","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"gOAgBgBA,EAdJ,SAACC,GACWA,EAAfC,KAAeD,EAAVE,MADQ,IACFC,EAAIH,EAAJG,GAClB,OAEC,yBAAKC,UAAU,mDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACpB,6BACC,4BAAKH,EAAMC,MACX,2BAAID,EAAME,UCYDK,EAnBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAChB,OACA,6BACCA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACC,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCKPW,EAdE,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACC,yBAAKX,UAAU,QAEf,2BACAA,UAAU,iCACTY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCcEI,G,wDArBd,WAAYnB,GAAO,IAAD,8BACjB,cAAMA,IACDoB,MAAM,CACVC,UAAU,GAHM,E,8DAOAC,EAAMC,GACvBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAKzB,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAKxB,MAAM0B,a,GAjBSC,cCWbC,EAXF,SAAC5B,GACb,OACC,yBAAK6B,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAkBC,OAAO,UAChEhC,EAAM0B,WC2CMO,E,kDAvCd,aAAc,IAAD,8BACZ,gBAeFC,eAAe,SAACC,GACf,EAAKV,SAAS,CAAEX,YAAYqB,EAAMC,OAAOC,SAfzC,EAAKjB,MAAM,CACVZ,OAAO,GACPM,YAAa,IAJD,E,gEASO,IAAD,OACnBwB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAE,EAAKjB,SAAS,CAACjB,OAAOkC,S,+BAQ1B,IAAD,OACDC,EAAgBnB,KAAKJ,MAAMZ,OAAOoC,QAAO,SAAApC,GAC/C,OAAOA,EAAOP,KAAK4C,cAAcC,SAAS,EAAK1B,MAAMN,YAAY+B,kBAEjE,OACA,yBAAKzC,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcS,KAAKU,iBAC9B,kBAAC,EAAD,KACC,kBAACa,EAAD,KACA,kBAAC,EAAD,CAAUvC,OAAQmC,W,GA/BJhB,aCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MACbC,SAASC,eAAe,SD0HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,a","file":"static/js/main.e2aa978a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n const Card=(props)=>{\r\n \tconst {name,email,id}=props;\r\n \treturn (\r\n\r\n \t\t<div className='tc bg-light-green dib pa3 ma2 grow bw2 shadow-5'>\r\n \t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n \t\t\t\t<div>\r\n \t\t\t\t\t<h2>{props.name}</h2>\r\n \t\t\t\t\t<p>{props.email}</p>\r\n \t\t\t\t</div>\r\n \t\t</div>\r\n \t\t);\r\n }\r\n\r\n export default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n\treturn(\r\n\t<div>\r\n\t{robots.map((user,i)=>{\r\n\t\treturn (\r\n\t\t\t<Card\r\n\t\t \t\tkey={i}\r\n\t\t \t\tid={robots[i].id}\r\n\t\t \t\tname={robots[i].name} \r\n\t\t \t\temail={robots[i].email}\r\n\t\t\t\t />\r\n\t\t\t\t);\r\n\t\t\t})\r\n \t}\t\r\n    </div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList","import React from 'react';\r\n\r\n\r\nconst SearchBox= ({searchfield, searchChange})=>{\r\n\treturn(\r\n\t\t<div className=' pa2'>\r\n\r\n\t\t<input\r\n\t\tclassName='pa3 ba--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t\t />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React,{ Component} from 'react';\r\n\r\n\r\nclass ErrrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true})\r\n\t}\r\n\r\n\r\n\trender(){\r\n\tif(this.state.hasError){\r\n\t\treturn <h1>Opppps. That is not good</h1>\r\n\t}\r\n\treturn this.props.children\r\n}\r\n}\r\n\r\n\r\nexport default ErrrorBoundry;\r\n\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border:'5px solid black',height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\n\r\n\r\nexport default Scroll;","import React,{ Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\tthis.state={\r\n\t\trobots:[],\r\n\t\tsearchfield: '',\r\n\r\n\t}\r\n}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=> response.json())\r\n\t.then(users=>this.setState({robots:users})\r\n\t);\r\n}\r\n\r\nonSearchChange=(event)=>{\r\n\tthis.setState({ searchfield:event.target.value})\r\n\t\r\n}\r\n\trender(){\r\n\t\tconst filteredRobots =this.state.robots.filter(robots=>{\r\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t})\r\n\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t\t<h1 className='f1'>Robotfriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\t\t\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}